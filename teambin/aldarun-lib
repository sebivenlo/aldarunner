#!/bin/bash

function svnup(){
    local grp=$1; shift
    if [ -d ${grp}/.svn ]; then
	svn up ${grp}
	svn info ${grp} > ${grp}/svninfo.current
    fi
}

function error_to_pre(){
    local app=$1; shift
    local grp=$1; shift
    local input=$1; shift
    local output=$1; shift
    cat - <<EOF > ${output}
<html>
 <head>
    <title>${grp} ${app} Maven Compiler Output</title>
 </head>
<body>
<h1>${grp} ${app} Compiler Errors</h1>
The errors below occured during compilation of business code and test code.
Further processing is impossible.
<pre style='color:#a00'>
EOF
    cat ${input} | sed -e's#/media/ramdisk/##g' >> ${output}

    cat - <<EOF >> ${output}
</pre>
</body>
EOF
    

}

function run_to_pre(){
    local app=$1; shift
    local grp=$1; shift
    local input=$1; shift
    local output=$1; shift
    cat - <<EOF > ${output}
<html>
 <head>
    <title>${grp} ${app} Maven Test Run Output</title>
 </head>
<body>
<h1>${grp} ${app} Test run output, maybe harmless</h1>
The output you see here is by the output produced by the tests,
either using simple print(ln) or errors reported by the test runner.
<pre style='color:#00a'>
EOF
    cat ${input} | sed -e's#/media/ramdisk/##g' | sed -e 's#\[ERROR\]#<span style="color:red">[ERROR]</span>#' >> ${output}

    cat - <<EOF >> ${output}
</pre>
</body>
EOF
    

}


## test if the summary als nummer of tests == passed tests
## @param csv file to evaluate 
function allTestsGreen(){
    local csv=$1; shift
    local oldifs="$IFS"
    if [ ! -e "$csv" ] ; then
	return 0
    fi
    x=$(tail -1 $csv)
    IFS=',' read -ra LINE <<< "$x"
    IFS="$OLDIFS"
    if [ "${LINE[0]}" == "${LINE[1]}" -a "${LINE[0]}" != "0" ]; then
	return 0
    else
	return 1
    fi
}    

##
## evaluate test report with optional maven args
function generateTestReports(){
    local app=$1; shift
    local grp=$1; shift
    if [  -s target/site/testsummary.csv ]; then ## test results
#	echo generate maven test report from test xml files
	mvn -fn -q -DskipTests \
	    surefire-report:report-only site -DgenerateReports=false \
	    -Dsurefire.report.title="Surefire Report ${app} ${grp}" $@
    fi
}

function runTests(){
    local ring=$1; shift
    local app=$1; shift
    local grp=$1; shift
    local site=$1; shift
    (
	cd ${ring}/
	mkdir -p target/site #{surefire-reports,site}
	mvn -fn  -q compile test-compile | tee compiler-out.txt
	# process compiler output if empty not empty1
	if [ -s compiler-out.txt ]; then
	    cp compiler-out.txt target/site/
	    error_to_pre ${app} ${grp} compiler-out.txt target/site/compiler-out.html
	else
	    rm -f compiler-out.txt;
	    ## actual test run
	    timeout 20s mvn -fn -q test | tee mvn-run-out.txt
	    ## catch timeout
	    exit_code=$?
	    if [ $exit_code -eq 124 ]; then
		echo -e "\n\n ${grp}  THE TESTS TIMED OUT, REPORTING MAY BE  INCOMPLETE\n\n" > mvn-run-out-timeout.txt
		cat  mvn-run-out.txt >>  mvn-run-out-timeout.txt
		mv  mvn-run-out-timeout.txt  mvn-run-out.txt
	    fi
	    
	    ## copy raw maven output text
	    cp mvn-run-out.txt target/site/
	    ## format for <pre> for viewing
	    run_to_pre ${grp} mvn-run-out.txt target/site/mvn-run-out.html
	    # collect test results in summary file for later eval
	    # count tests summary text files
	    cat target/surefire-reports/*.txt | aldatestsummary > target/site/testsummary.csv
	    if [ "$site" != "siteA" ] ; then
		generateTestReports ${app} ${grp} jxr:test-jxr javadoc:test-javadoc
	    else
		generateTestReports ${app} ${grp}
	    fi
	    

	    # evaluate test summary
	    if [ -f target/site/testsummary.csv ]; then
		if allTestsGreen target/site/testsummary.csv ; then
#		    echo -e "\e[42m++++ all green, run coverage ++++ \e[m"
		    timeout 20s mvn -fn -q -P jacoco test \
			jacoco:report site -DgenerateReports=false \
			-Djacoco.report.title="Coverage report for ${app} ${grp}"
		    jacocosummary target/site/jacoco/jacoco.csv
		fi
	    fi
	fi
    )
    reportdir=reports/2019/${grp}/${app}/$site
    rm -fr ${reportdir}
    mkdir -p ${reportdir}
#    echo -e "\e[45mcopy test reports to ${reportdir}\e[m"
    cp ${ring}/api.version ${ring}/target/site/
    rsync -a ${ring}/target/site/ ${reportdir}/
}

## get the version used by the group
## to determine which test set to run.
## Sideeffect file ${app}/api.version is updated/written,
## so the website does not have to.
## @param group
## @param app application
## @param mvnCoord to determine version
function getApiVersion() {
    local grp=$1; shift
    local app=$1; shift
    local mvnCoord=$1; shift
    local pomfile=$(find ${grp} -name pom.xml | grep ${app})
    local version=$(getapiversion.pl ${pomfile} ${mvnCoord} 0.1)
    echo -n "v${version}" 
}

## all tests are run in an arena, by copying the sources
## and optionally the teachers tests to a faster storage area, the ARENA.
function cleanup(){
    local app=$1; shift
    local mode=$1; shift
    if [ ! -z "${ARENA}" ]; then
	rm -fr ${ARENA}/${app}${mode}
    fi
}
source ${HOME}/teambin/mavendo
##
## Run the test of the student project as committed by the group and
## commit the resulting reports to the publication server.
## @param app application directory
## @param group group
##
function bbrun(){
    local apiversion=$1; shift
    local app=$1; shift
    local grp=$1; shift
    pomfile=$(find ${grp} -name pom.xml -type f | grep ${app})
    if [ -z "${pomfile}" ] ; then
	echo $app pomfile not found.
	exit 1
    fi
    srcdir=$(dirname ${pomfile})
#    echo -e "running all tests from source dir \e[32m${srcdir}\e[m on \e[32m${app}\e[m for \e[32m${grp} for api ${apiversion}\e[m"
    ring=${ARENA}/${app}BB
    local testpom=apis/${app}/test${apiversion}/${app}/pom.xml
    if [ ! -e ${testpom} ]; then
	echo -e "cannot find  \e[41m ${testpom}\e[m"
	exit 1
    fi
    mkdir -p ${ring}
    rsync -a ${srcdir}/ ${ring}/
    cat apis/${app}/test${apiversion}/${app}/pom.xml | sed -e "s/solution/${grp}/" > ${ring}/pom.xml
    echo -n "${apiversion}" > ${ring}/api.version
#    runTests $ring $app $grp site
    mavendo $ring $app $grp site
}

##
## Run the teacher's test on the student project as committed by the group and
## commit the resulting reports to the publication server.
## @param app application directory
## @param group group
##
function abrun(){
    local apiversion=$1; shift
    local app=$1; shift
    local grp=$1; shift
    pomfile=$(find ${grp} -name pom.xml -type f | grep ${app})
    if [ -z "${pomfile}" ] ; then
	echo $app pomfile not found.
	exit 1
    fi
    srcdir=$(dirname ${pomfile})
    if [ ! -e ${testpom} ]; then
	echo -e "cannot find  \e[41m ${testpom} \e[m"
	exit 1
    fi
    ring=${ARENA}/${app}AB
    mkdir -p ${ring}/src/main
    mkdir -p ${ring}/src/test
    rsync -a ${srcdir}/src/main/ ${ring}/src/main/
    rsync -a apis/${app}/test${apiversion}/${app}/src/test/ ${ring}/src/test/
    cat apis/${app}/test${apiversion}/${app}/pom.xml | sed -e "s/solution/${grp}/" > ${ring}/pom.xml
    echo -n "${apiversion}" > ${ring}/api.version
#    runTests $ring $app $grp siteA
    mavendo $ring $app $grp siteA
}
